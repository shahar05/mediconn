<mat-card class="col-12 p-0 ">

    <mat-card-header class="text-center f-2-5 white-font blue-color ">
        <div class="d-flex col justify-content-center mt-2 mb-2 p-3">
            Choose Patients
        </div>
    </mat-card-header>

    <div class="d-flex justify-content-center ">
        <div class="col text-center p-0">
            <mat-card class="shadow d-flex justify-content-start  ">

              
                <button mat-mini-fab color="accent" (click)="moveToGraphPage()" class="ml-2 mr-2" >
                    <mat-icon>bar_chart</mat-icon>
                  </button>
                <button mat-mini-fab color="accent" (click)="chooseCalander()" >
                    <mat-icon>calendar_today</mat-icon>
                  </button>       

                <div class="col-2"></div>
                <mat-form-field class=" text-center col-3 ">
                    <mat-label>{{'enter_phone_or_name' | translate}}</mat-label>
                    <input matInput placeholder="Example  050-2347865"  [(ngModel)]="searchKey">
                </mat-form-field>

                <button mat-mini-fab color="primary"  (click)="filter()" >
                    <mat-icon>search</mat-icon>
                  </button>
      

            </mat-card>
        </div>
    </div>


               
        <app-patients class="p-5" [patients]="patients"  [fromPopUp]="true" (addPatientClicked)="addPatientToGraph($event)"  ></app-patients>
   

 
</mat-card>

moveToGraphPage(){

    let patientsId = this.patientsToGraph.map( p => p._id )

    this.patientService.getQuestionResultsOfPatients(this.data.question._id , patientsId ,  this.dates  ).subscribe((arr:any)=>{
        this.dialogRef.close();
         
        let text : QuestionText //= this.data.question.textArr.find( ( t : QuestionText)=>{ (t.language + "") === (this.doctor.mainLanguage +"")  } )
       this.data.question.textArr.forEach((t:QuestionText )=> {
            if(  (t.language + "").trim() === (this.doctor.mainLanguage +"").trim() ){
              text = t
            }
        });
        this.dialogService.openDialog( GraphPatientComponent ,{arr:arr ,headline : text.text },"80%"  ).afterClosed().subscribe(()=>{})
      
    });

  }

  addPatientToGraph(patient : Patient){
    
    let index : number =   this.patientsToGraph.findIndex(  (p : Patient)=>{ patient._id === p._id   } )

    if(index === -1){
      this.patientsToGraph.push(patient)
    }else{
      this.patientsToGraph.splice(index , 1);
    }

}
chooseCalander(){

    this.dialogService.openDialog(  DatePickerDialogComponent , {}  ).afterClosed().subscribe((dates: { dateStart: Date, dateEnd: Date })=>{
        this.dates = dates;
    })

}
filter() {

  let strNoTrim: string[] = this.searchKey.split(" ");
  let str: string = this.searchKey.trim().replace(/-/gi, "");
  let p: Patient[] = [];
  if (str && str.length != 0) {

    if (/[0-9]+$/.test(str)) {
      p = this.searchByPhoneNumber(str)
    }
    else {

      p = this.searchFullName(this.searchKey);

      if (!p.length) {
        p = this.searchByName(str);
        let i = 0;
        while (!p.length || i < strNoTrim.length) {
            if(strNoTrim[i].length)
              p = this.searchByName(strNoTrim[i++]);
             else
              i++; 
        }
      }
    }
  }


  //p.map(pt => pt.phoneNumber.replace(/-/gi, ""))
  // p.map(pt => pt.phoneNumber.substring(0, 3) + "-" + pt.phoneNumber.substring(3, pt.phoneNumber.length))
  this.patients = p;
}

searchByPhoneNumber(searchingNumber: string) {
  let patientsFilter: Patient[] = [];

  this.patientsTemp.forEach(p => {
    if (p.phoneNumber.replace(/-/gi, "").includes(searchingNumber)) {
      p.phoneNumber = p.phoneNumber.replace(/-/gi, "");
      p.phoneNumber = p.phoneNumber.substring(0, 3) +
        "-" + p.phoneNumber.substring(3, p.phoneNumber.length);
      patientsFilter.push(p);
    }
  });
  return patientsFilter;
}

searchFullName(fullname: string) {
  let patientsFilter: Patient[] = [];
  fullname = fullname.toLowerCase();
  this.patientsTemp.forEach(patient => {

    let patientName =
      patient.firstName.toLocaleLowerCase() +
      patient.lastName.toLocaleLowerCase();

    if (patientName.includes(fullname)) {
      patientsFilter.push(patient);
    }
  });
  return patientsFilter;
}


searchByName(patientName: string) {
  let patientsFilter: Patient[] = [];
  if (!/^[a-zA-Z]+$/.test(patientName)) return this.patientsTemp;

  patientName = patientName.toLowerCase();
  this.patientsTemp.forEach(patient => {

    if (patient.firstName.toLocaleLowerCase().includes(patientName)
      || patient.lastName.toLocaleLowerCase().includes(patientName)) {
      patientsFilter.push(patient);
    }
  });
  return patientsFilter;
}
























import { Component, OnInit, Inject } from '@angular/core';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { BaseQuestion, Question, Patient } from 'src/app/models';
import { QuestionService } from 'src/app/services/question/question.service';
import { Language } from 'src/app/enum';
@Component({
  selector: 'app-question-editor-wrapper',
  templateUrl: './question-editor-wrapper.component.html',
  styleUrls: ['./question-editor-wrapper.component.scss']
})
export class QuestionEditorWrapperComponent implements OnInit {
  languages: Language[] = [];
  constructor(public dialogRef: MatDialogRef<QuestionEditorWrapperComponent>,
    @Inject(MAT_DIALOG_DATA)
    public data: {
      questionToEdit: Question;
      patient: Patient;
      isDefault: boolean;
    }, private questionService: QuestionService) { }
  ngOnInit(): void {
    this.languages.push(this.data.patient.language);
  }
  createNewQuestion(newQuestion: BaseQuestion) {
    console.log(newQuestion);
    newQuestion.isDefault = false;
    newQuestion.creatorID = this.data.patient.creatorID;
    console.log(newQuestion.creatorID);
    this.questionService.createNewQuestionToPatient(newQuestion, this.data.patient._id).subscribe((newQuestion) => {
      console.log("wonderfull");
      console.log(newQuestion);
      this.dialogRef.close(newQuestion);
    }, (err: any) => {
      console.log("error when create new question");
      console.log(err);
    });
  }
}





      // this.languages.forEach((lang, index) => {
      //   let textQuestion: QuestionText = { language: lang, text: null }
      //   this.question.textArr.push(textQuestion)
      // });

//newQuestion.creatorID = this.question.creatorID;

    this.question.textArr.forEach((element) => {
      
      console.log(element.language);
      console.log(this.texts[element.language]);
      
      
      element.text = this.texts[element.language];
    });

        <mat-card class="d-flex flex-column shadow p-0">

            <mat-card-header class="text-center f-2-5 white-font blue-color ">
                <div class="d-flex col justify-content-center mt-2 mb-2 p-3">
                    New Default Question
                </div>
            </mat-card-header>


            <mat-tab-group mat-stretch-tabs [selectedIndex]="selected.value"
                (selectedIndexChange)="selected.setValue($event)">

                <mat-tab *ngFor="let language of languages" [label]="language">

                    <mat-form-field class="full-width text-center pl-5 pr-5 mt-4 mb-3">
                        <label class="display-4 f-m "> Enter Question in {{language}}</label>
                        <input matInput [(ngModel)]="texts[language]">
                    </mat-form-field>

                </mat-tab>
            </mat-tab-group>
            <div class="text-center ml-4 mr-4 ">
                <label id="example-radio-group-label" class="display-4 f-m"> Select Type Of Question</label> <br>
                <mat-radio-group aria-labelledby="example-radio-group-label" [(ngModel)]="question.questionType">
                    <mat-radio-button color="primary" value="Binary" class="m-2">Binary</mat-radio-button>
                    <mat-radio-button color="primary" value="Regular" class="m-2">Regular</mat-radio-button>
                    <mat-radio-button color="primary" value="Quantity" class="m-2">Quantity</mat-radio-button>
                </mat-radio-group>
            </div>


            <div *ngIf=" question.questionType === 'Quantity'" class="d-flex justify-content-center mb-4 ">
                <mat-card class="col-5 d-flex justify-content-center blue-shadow p-0 ">
                    <mat-form-field class=" text-center col-6">
                        <input matInput placeholder="min" type="number" [(ngModel)]="question.min">
                    </mat-form-field>
                    <mat-form-field class=" text-center col-6">
                        <input matInput placeholder="max" type="number" [(ngModel)]="question.max">
                    </mat-form-field>
                </mat-card>
            </div>


            <div class="text-center m-3">
                <button mat-raised-button color="primary" (click)="createDefaultQuestion()">Submit</button>
            </div>

        </mat-card>





















    if(this.doctor.password.toString().length === 0 || this.doctor.username.toString().length === 0 ){
      this.msg = "password or username is empty"
    }else{
      this.loginService.login(this.doctor).subscribe(( response:any)=>{
        console.log(response);
        if(response.isLogin){
            if(response.type === "doctor"){
              this.loginService.setDoctor(response);
            }else if (response.type === "admin") {
              this.loginService.setAdmin(response);
            } else {
                console.log("server error");
            }
          this.router.navigate(["patients"]);
        }else{
          console.log("error");
          
        }
    })
    }
  


  <button class="btn redanger small"><mat-icon>delete</mat-icon></button> 




       this.patientService.createNewPatient(result).subscribe((response : any)=>{
          console.log(response);
            this.router.navigate(["patients"]);
        },(err:any)=>{
            alert("error create new patient");
            console.log(err);
            
        })
    
